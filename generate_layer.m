
function [point_index, ...
         line_index, ...
         surface_index, ...
         volume_index, ...
         point_str, ...
         line_str, ...
         surface_str, ...
         volume_str] = generate_layer(x_start, ...
                                      y_start, ...
                                      z_start, ...
                                      x_dim, ...
                                      y_dim, ...
                                      z_dim, ...
                                      point_index, ...
                                      line_index, ...
                                      surface_index, ...
                                      volume_index, ...
                                      point_str, ...
                                      line_str, ...
                                      surface_str, ...
                                      volume_str, ...
                                      enable_color, ...
                                      color_map)
    point_index = point_index + 1;
    str = sprintf('Point(%d) = {%.2f,%.2f,%.2f,lc};\n', point_index, x_start, y_start, z_start);
    point_str = [point_str str];

    point_index = point_index + 1;
    str = sprintf('Point(%d) = {%.2f,%.2f,%.2f,lc};\n', point_index, x_start + x_dim, y_start, z_start);
    point_str = [point_str str];

    point_index = point_index + 1;
    str = sprintf('Point(%d) = {%.2f,%.2f,%.2f,lc};\n', point_index, x_start + x_dim, y_start + y_dim, z_start);
    point_str = [point_str str];

    point_index = point_index + 1;
    str = sprintf('Point(%d) = {%.2f,%.2f,%.2f,lc};\n', point_index, x_start, y_start + y_dim, z_start);
    point_str = [point_str str];

    line_index = line_index + 1;
    str = sprintf('Line(%d) = {%d,%d};\n',...
                  line_index,...
                  point_index,...
                  point_index - 1);
    line_str = [line_str str];

    line_index = line_index + 1;
    str = sprintf('Line(%d) = {%d,%d};\n',...
                  line_index,...
                  point_index - 1,...
                  point_index - 2);
    line_str = [line_str str];

    line_index = line_index + 1;
    str = sprintf('Line(%d) = {%d,%d};\n',...
                  line_index,...
                  point_index - 2,...
                  point_index - 3);
    line_str = [line_str str];

    line_index = line_index + 1;
    str = sprintf('Line(%d) = {%d,%d};\n',...
                  line_index,...
                  point_index - 3,...
                  point_index);
    line_str = [line_str str];

    % Surfaces
    surface_index = surface_index + 1;
    str = sprintf('Line Loop(%d) = {%d, %d, %d, %d};\n',...
                  surface_index,...
                  line_index,...
                  line_index - 1,...
                  line_index - 2,...
                  line_index - 3);
    surface_str = [surface_str str];

    str = sprintf('Plane Surface(%d) = {%d};\n',...
                  surface_index,...
                  surface_index);
    surface_str = [surface_str str];
    
    if (enable_color == 1)
        str = sprintf('Color {%d, %d, %d} { Surface{%d}; }\n', ...
                      color_map(1), ...
                      color_map(2), ...
                      color_map(3), ...
                      surface_index);
        surface_str = [surface_str str];
    end

    % Volume
    volume_index = volume_index + 1;
    str = sprintf('out[] = Extrude {0,0,%.2f} {\n',...
                  z_dim);
    volume_str = [volume_str str];
    str = sprintf('    Surface{%d};\n', surface_index);
    volume_str = [volume_str str '};\n'];
    
    if (enable_color == 1)
        str = sprintf('Color {%d, %d, %d} { Surface{out[0], out[2], out[3], out[4], out[5]}; }\n', ...
                      color_map(1), ...
                      color_map(2), ...
                      color_map(3));
        volume_str = [volume_str str];
        str = sprintf('Color {%d, %d, %d} { Volume{out[1]}; }\n', ...
              color_map(1), ...
              color_map(2), ...
              color_map(3));
        volume_str = [volume_str str];
    end
    
end
